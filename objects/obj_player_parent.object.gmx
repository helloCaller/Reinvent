<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_spring</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Flash White
whiteFlash = 0;

//Jumping variable
jumping = 0;

//Camera target
camera_target = id;

///Initialize Variables
grav = 0.4;
//horizontal speed
hsp = 0;
//vertical speed
vsp = 0;
jumpspeed = 8;
movespeed = 4;

//Last ground variables for respawning
//lastGroundX = x;
//lastGroundY = y;



//Key Presses
key_left = 0;
key_right = 0;
key_jump = 0;

//Upgrade state
upgradeState = "none";

//IMAGE 
image_speed = 0.5;
facing= 1;
alpha = 1;
//TIMER
timer = 200;
respawnTimer = 0;



//OBJECT FADE AWAY
image_alpha= 1;

//Check if player is touching the ground
onground = 0;

playerDead = false;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/////////////////
// Death Block //
/////////////////
if place_meeting(x,y,obj_death_block){
audio_play_sound(sfx_death,1,0);
playerDead = true;
    x = respawnX;
    y = respawnY;
   
    
    
    if(instance_exists(obj_hook)){
        inCutscene = 0;
        with(obj_hook){
        instance_destroy()
        }
    }
    
    if(instance_exists(obj_throwable)){
        obj_throwable.state = "reset"
        }
    
} else playerDead = false;



/////////////////////////////
// Last Ground for Respawn //    //Unused
/////////////////////////////
/*if onground{
    lastGroundX = x;
    lastGroundY = y;}*/
    
/////////////////   
// Flash White //
/////////////////
if whiteFlash &gt; 0{
    whiteFlash -= 1/30;
    if whiteFlash &lt; 0 then whiteFlash = 0;}  

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> ///Setting up movements

/////////////////////////
// In Cutscene Changes //
/////////////////////////
if inCutscene{
    hsp = 0; vsp = 0;}
    
////////////////
// On Ground? //
////////////////
onground = place_meeting(x,y+1,obj_static);
if vsp &lt; 0 then onground = 0;


//If not in cut scene move left and right
if inCutscene = 0{
    key_right = keyboard_check(vk_right) || keyboard_check(ord("D"));
    key_left = -(keyboard_check(vk_left) || keyboard_check(ord("A")));
    key_jump = keyboard_check_pressed(vk_space);
    } else{
    key_right = 0
    key_left = 0
    key_jump = 0
    }
 
   
if inCutscene = 0{
    if(keyboard_check_pressed(vk_right) || keyboard_check_pressed(ord("D")))facing = 1;
    if(keyboard_check_pressed(vk_left) || keyboard_check_pressed(ord("A")))facing = -1;
    } 

//Movement calculated
move = key_left + key_right;
hsp = move * movespeed;

if(vsp &lt; 10){ 
vsp += grav;
}


//Jumping
if(place_meeting(x,y+1, obj_static)){
    if(key_jump){
     vsp = -jumpspeed;
    jumping = 1;
    }
}



//horizontal collision
//
if(place_meeting(x+hsp,y,obj_static)){
    while(!place_meeting(x+sign(hsp),y,obj_static)){
     x += sign(hsp);
     
     }
    hsp = 0;
    
} 



  
//Wall Above
if vsp &lt; 0{
    if place_meeting(x,y+vsp,obj_static){
        move_contact_solid(90,32);
        vsp = 0;}}
        
//Wall Below
if vsp &gt; 0{
    if place_meeting(x,y+vsp,obj_static){
        move_contact_solid(270,32);
        vsp = 0;
        onground = 1;}}



//Quicksand condition--maybe this could be stored as a state somewhere else
      if(place_meeting(x, y, obj_quicksand)){
        if(hsp != 0){
            hsp = hsp/4;
        }
        if(key_jump){
            vsp += 4;
        } else {
            vsp = 0.5;
        }
     }
     
     if(place_meeting(x, y-64, obj_quicksand)){
        x = respawnX;
        y = respawnY;
        //Destroy hook if it exists
            if(instance_exists(obj_hook)){
                inCutscene = 0;
                with(obj_hook){
                instance_destroy()
            }
    }
        
     } 
            

//Apply speed 
x += hsp;
y += vsp;

//Still jumping?
if jumping{
    if vsp &gt;= 0 then jumping = 0;}

//////////////////////
// Room Change Area //
//////////////////////
var roomChange = instance_place(x,y,obj_room_change_area);
if roomChange != noone{
    inCutscene = 1;
    with obj_coconut{
        instance_destroy()}
    hsp = 0;
    vsp = 0;
    if obj_fade.fadeState = ""{
        obj_fade.fadeState = "out";}
    if obj_fade.fadeState = "in"{
       // var nextRm = roomChange.nextRoom;
        //room_goto(nextRm);
        room_goto_next();
        inCutscene = 0;}}
        
//if keyboard_check_pressed(ord('U')) then room_goto(room_2);

//for animations
drill = keyboard_check(ord("S")) || keyboard_check(vk_down);
throw = keyboard_check(ord("X")) || keyboard_check(ord("J"));



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>respawnX = x;
respawnY = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw player
draw_sprite_ext(sprite_index, image_index,x,y,facing,1,0,c_white,1);

//Flash white
if whiteFlash &gt; 0{
    d3d_set_fog(true, c_white, 0, 0);
    draw_sprite_ext(sprite_index, image_index,x,y,facing,1,0,c_white,whiteFlash);
    d3d_set_fog(false, 0, 0, 0);}
    
    
//For Bug Testing
/*draw_set_font(fn_arial);
draw_set_color(c_white);
draw_text(x,y-32,jumping);
//draw_text(x,y-64,obj_fade.fadeState);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
