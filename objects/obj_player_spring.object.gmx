<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_spring</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_player_parent</parentName>
  <maskName>spr_player_spring</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
//CODE UNIQUE TO SPRING PLAYER GOES HERE


//slow player down
movespeed = 2;




//Particle spark

global.P_System=part_system_create();
global.Particle1=part_type_create();
part_type_shape(global.Particle1,pt_shape_pixel);            //This defines the particles shape
part_type_size(global.Particle1,1,1,0,0.4);                    //This is for the size
part_type_scale(global.Particle1,1,1);                       //This is for scaling
part_type_color1(global.Particle1,c_red);   
                //This sets its colour. There are three different codes for this
part_type_alpha1(global.Particle1,1);                        //This is its alpha. There are three different codes for this
part_type_speed(global.Particle1,0.50,2,-0.10,0);            //The particles speed
part_type_direction(global.Particle1,0,359,0,20);            //The direction
part_type_orientation(global.Particle1,0,0,0,0,1);           //This changes the rotation of the particle
part_type_blend(global.Particle1,1);                         //This is the blend mode, either additive or normal
part_type_life(global.Particle1,1,10); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited(); //Executes parent code

///STEP CODE

/*
if inCutscene = 0{
    key_right = keyboard_check(vk_right);
    key_left = -keyboard_check(vk_left);
    key_jump = keyboard_check_pressed(vk_space);}
else{
    key_right = 0
    key_left = 0
    key_jump = 0}
*/
/*
//THIS FLIPS SPRITE
if inCutscene = 0{
    if(keyboard_check_pressed(vk_right))facing = 1;
    if(keyboard_check_pressed(vk_left))facing = -1;}    

//React to inputs
//sets up movement to be equal to which direction is being pressed
move = key_left + key_right;
hsp = move * movespeed;
if(vsp &lt; 10){ 
vsp += grav;

}

if(place_meeting(x,y+1, obj_static)){
vsp = key_jump * -jumpspeed;
}
//horizontal collision
if(place_meeting(x+hsp,y,obj_static))
{
    while(!place_meeting(x+sign(hsp),y,obj_static))
    {
     x += sign(hsp);
     }
     hsp = 0;

}
*/

/*
//Apply verticle and horizontal speed 
x += hsp;
y += vsp;
*/



//PARTICLE SYSTEM ON JUMP
if(key_jump){
sparking = random_range(1,10);
  if(sparking &lt; 4)part_particles_create(global.P_System, x-10, y+20, global.Particle1, 75);
  };
  
 
  
 if(keyboard_check_pressed(ord('S'))){
   instance_destroy();
   instance_create(x,y, obj_player_wheel);
   }
  
   
   //movement animation 
   
        if(hsp==0){
    sprite_index = spr_player_spring_idle;
   image_speed = 0.5;
   } else {
   image_speed = 0.5;
   //so as to restart image_index from 0
        if(floor(sprite_index)!=spr_player_spring){
            image_index = 0;
            sprite_index = spr_player_spring;
             }
        }
  
   

   
//vertical wall collision

/*
if(place_meeting(x, y+vsp, obj_wall)){
    while(!place_meeting(x,y+sign(vsp),obj_static)){
     y+= sign(vsp);
     }
     vsp=0;
    onground=true;
}
else onground = false;
/*
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>48,0</point>
    <point>48,64</point>
    <point>0,64</point>
  </PhysicsShapePoints>
</object>
