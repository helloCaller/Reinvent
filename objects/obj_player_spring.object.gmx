<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_spring</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_player_parent</parentName>
  <maskName>spr_player_spring</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
//CODE UNIQUE TO SPRING PLAYER GOES HERE
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited(); //Executes parent code

///STEP CODE

//Get player input
if inCutscene = 0{
    key_right = keyboard_check(vk_right);
    key_left = -keyboard_check(vk_left);
    key_jump = keyboard_check_pressed(vk_space);}
else{
    key_right = 0
    key_left = 0
    key_jump = 0}

//THIS FLIPS SPRITE
if inCutscene = 0{
    if(keyboard_check_pressed(vk_right))facing = 1;
    if(keyboard_check_pressed(vk_left))facing = -1;}    

//React to inputs
//sets up movement to be equal to which direction is being pressed
move = key_left + key_right;
hsp = move * movespeed;

//Jump
if onground{
    if key_jump{
        vsp = -jumpspeed;
        onground = false;}}

//No longer on ground
if onground{
    if !place_meeting(x,y+1,obj_wall){
        onground = false;}}

//Gravity
if onground = 1{
    grav = 0;}
else grav = 0.4;    



//IN CASE PLAYER FALLS
if(obj_player_spring.y &gt; room_height+100){
show_message("falling...falling....falling..splat");
//destroy particle system

game_restart();


};


//PARTICLE SYSTEM ON JUMP
if(key_jump){
sparking = random_range(1,10);
  if(sparking &lt; 4)part_particles_create(global.P_System, x-10, y+20, global.Particle1, 75);
  };
  
 
  
    if(place_meeting(x,y, obj_orb)){
   rifthit = true;
 } 
   if(rifthit == true) {
    image_alpha -= 0.04;
   }
   
   if image_alpha&lt;= 0{
   instance_destroy();
   instance_create(x,y, obj_player_wheel);
   }
  
   

   
//Collision
//Floor
if vsp &gt; 0{
    if place_meeting(x,y+vsp+grav,obj_wall){
        move_contact_solid(270,32);
        onground = 1;
        grav = 0;
        vsp = 0;}}
        
//Ceiling
if vsp &lt; 0{
    if place_meeting(x,y+vsp+grav,obj_wall){
        move_contact_solid(90,32);
        vsp = 0;}}
        
//horizontal collision
if hsp != 0{
    if(place_meeting(x+hsp,y,obj_wall)){
        move_contact_solid(90-sign(hsp)*90,32);
        hsp = 0;}}        
   
if vsp &lt; 10 then vsp += grav;
else vsp = 10;
x += hsp;
y += vsp;

   //movement animation 
   if(onground){
        if(hsp==0){
    sprite_index = spr_player_spring_idle;
   image_speed = 0.5;
   } else {
   image_speed = 0.5;
   //so as to restart image_index from 0
        if(floor(sprite_index)!=spr_player_spring){
            image_index = 0;
            sprite_index = spr_player_spring;
            
        }
   }
  
   } else { 
   //add jump code here
   image_speed=0.5
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>48,0</point>
    <point>48,64</point>
    <point>0,64</point>
  </PhysicsShapePoints>
</object>
