<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_rock</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_static</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
hsp = 0;
vsp = 0;

state = "";

grav = 0.5;
rotation = 0;

startX = x;
startY = y;

currentY = y;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(state == "in air" &amp;&amp; place_meeting(x-10, y, obj_throwable)){
 vsp +=grav;
 }
 
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>  
if state = "playerOnLeftFlipping"{  
   //if there's an object right above, don't move
    if(place_meeting(x, y-17, obj_static)){
        state= "in air";
        }else {
        //if throwable object is directly beside another, it at least pops up
        if(place_meeting(x+1,y,obj_throwable)){
            vsp = -10;
        }
    
     if(!place_meeting(x+1,y,obj_static)){//added condition so that you can't throw the object if it's up against a wall
        vsp = -10;
        hsp = 4;
        rotation += 3
       
        //if it hits player
         if(place_meeting(x+hsp, y,obj_player_parent)){
       while(!place_meeting(x+sign(hsp), y,obj_player_parent)){
           x += sign(hsp);
        }
            hsp=0;
            rotation = 0;
    }
    

     //if it hits a static obj (wall) 
    if(place_meeting(x+hsp, y,obj_static)){
        while(!place_meeting(x+sign(hsp), y,obj_static)){
           x += sign(hsp);
        }
            hsp = 0;
            rotation = 0;
            
    }
    
    
    x+=hsp;
    

// collision
     if(place_meeting(x, y+vsp,obj_player_parent)){
        while(!place_meeting(x, y+sign(vsp),obj_player_parent)){
           y += sign(vsp)
        }
            hsp = 0;
           vsp = 0 ;
           rotation = 0;
    }
    
    
    

      
    if(place_meeting(x, y+vsp, obj_static)){
        while(!place_meeting(x, y+sign(vsp),obj_static)){
          y+= sign(vsp);
        }
          hsp=0;
          vsp=0;
          rotation=0;
          currentY = y;
          state = "";
    } 
    
    
        y+=  vsp;
       
    } else {
    
        state = "in air";
        }
    
    if(currentY - y &gt;= 20){ //setting the height at which to come down
         state = "in air";
    }
    
   } 
    
}  


if state = "playerOnRightFlipping"{
//all the same as above, just for reversed conditions
    if(place_meeting(x, y-17, obj_static)){
        state="in air";
        }else {
        
        
    
     if(!place_meeting(x-1,y,obj_static)){
      vsp = -10;
      hsp = -4;
      rotation -= 3;
      
      if(place_meeting(x+hsp, y,obj_player_parent)){
       while(!place_meeting(x+sign(hsp), y,obj_player_parent)){
           x += sign(hsp);
        }
            hsp=0;
            rotation = 0;
    }

      
    if(place_meeting(x+hsp, y,obj_static)){
        while(!place_meeting(x+sign(hsp), y,obj_static)){
           x += sign(hsp);
        }
            hsp = 0;
            rotation = 0;
    }
    
     
    x+=hsp;
    

// collision
     if(place_meeting(x, y+vsp,obj_player_parent)){
        while(!place_meeting(x, y+sign(vsp),obj_player_parent)){
           y += sign(vsp)
        }
            hsp = 0;
           vsp = 0 ;
           rotation = 0;
    }


      
    if(place_meeting(x, y+vsp, obj_static)){
        while(!place_meeting(x, y+sign(vsp),obj_static)){
          y+= sign(vsp);
        }
          hsp=0;
          vsp=0;
          rotation=0;
          currentY = y;
          state = "";
    } 
    
    
   
      y+= vsp;
      
    }  else {
        state = "in air";
        }
    
    if(currentY - y &gt;= 20){ //setting the height at which to come down
        state = "in air";
    }
    
    }
}

if state = "in air"{
   
    vsp += grav;
    
    //collision objects + player
     if(place_meeting(x+hsp, y,obj_player_parent)){
       while(!place_meeting(x+sign(hsp), y,obj_player_parent)){
           x += sign(hsp);
        }
            hsp=0;
            rotation = 0;
    }

      
    if(place_meeting(x+hsp, y,obj_static)){
        while(!place_meeting(x+sign(hsp), y,obj_static)){
           x += sign(hsp);
        }
            hsp = 0;
            rotation = 0;
    }
    
    
    
    
    x+=hsp;
    

// collision
     if(place_meeting(x, y+vsp,obj_player_parent)){
        while(!place_meeting(x, y+sign(vsp),obj_player_parent)){
           y += sign(vsp)
        }
            hsp = 0;
           vsp = 0 ;
           rotation = 0;
    }
   

      
    if(place_meeting(x, y+vsp, obj_static)){
        while(!place_meeting(x, y+sign(vsp),obj_static)){
          y+= sign(vsp);
        }
          hsp=0;
          vsp=0;
          rotation=0;
          currentY = y;
          state = "";
    } 
    
    
    
    
      y += vsp;// should be called after movement and collision checks but I'm still tinkering with them
    
}



    
    if state = "reset"{
        x = startX;
        y = startY;
        currentY = startY;
        state= "";
    }



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,rotation,c_white,image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
