<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_wheels</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_player_parent</parentName>
  <maskName>spr_player_spring</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
//CODE UNIQUE TO WHEEL PLAYER GOES HERE
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited(); //Executes parent code

///STEP CODE
//Get player input
/*
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_space);
*/

//React to inputs
//sets up movement to be equal to which direction is being pressed
/*
move = key_left + key_right;
hsp = move * movespeed;
if(vsp &lt; 10){ 
vsp += grav;

}

if(place_meeting(x,y+1, obj_static)){
vsp = key_jump * -jumpspeed;
}
//horizontal collision
if(place_meeting(x+hsp,y,obj_static))
{
    while(!place_meeting(x+sign(hsp),y,obj_static))
    {
     x += sign(hsp);
     }
     hsp = 0;

}





//verticle collision
if(place_meeting(x, y+vsp, obj_static)){
    while(!place_meeting(x,y+sign(vsp),obj_static)){
     y+= sign(vsp);
     }
     vsp=0;

}



x += hsp;
y += vsp;



//IF PLAYER GOES OFF THE MAP
if(obj_player_wheel.y &gt; room_height+100){
game_restart();

}
*/
if(keyboard_check_pressed(ord('S'))){
   instance_destroy();
   instance_create(x,y, obj_player_lever);
   }

       //Jumping
    if jumping{
        sprite_index = spr_player_jump_square_wheels; //Replace with wheels later
        image_speed = 0.34;
        if floor(image_index) = 1{
            image_speed = 0;}}    
            
    //Falling
    else if vsp &gt; 0{
        sprite_index = spr_player_jump_square_wheels; //Replace with wheels later
        image_speed = 0;
        image_index = 2;}
   
   //Everything else
   
   else{
   //movement animation 
   
        if(hsp==0){
    sprite_index = spr_player_wheels_idle;
   image_speed = 0.334;
   } else {
   image_speed = 0.334;
   //so as to restart image_index from 0
        if(floor(sprite_index)!=spr_wheels){
            image_index = 0;
            sprite_index = spr_wheels
             }
        }
   }

   
//THIS FLIPS SPRITE
/*
if(keyboard_check_pressed(vk_right))facing = 1;
if(keyboard_check_pressed(vk_left))facing = -1;
*/

  
 
  
  
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
